var chessPlate=
{A1,A2,A3,A4,A5,A6,A7,A8,      
 B1,B2,B3,B4,B5,B6,B7,B8,
 C1,C2,C3,C4,C5,C6,C7,C8,
 D1,D2,D3,D4,D5,D6,D7,D8,
 E1,E2,E3,E4,E5,E6,E7,E8,
 F1,F2,F3,F4,F5,F6,F7,F8,   
 G1,G2,G3,G4,G5,G6,G7,G8,
 H1,H2,H3,H4,H5,H6,H7,H8,          
}






  if(offsetX>=800)
    {
        if(whiteCellFirst==true)
        {
            offsetX=0;
            whiteCellFirst=false
        }
        else{
        offsetX=0;
        whiteCellFirst=true;
        }
        offsetY-=100;
    }


    if(prevActiveCell.figure!=null && prevActiveCell.figure!=undefined)
    {
        chessPlate[i].figure = prevActiveCell.figure;
        prevActiveCell.figure=null;
        drawFigures();
    }





    move()
   {
        this.nextX=nextCell.coords.x;
        this.nextY=nextCell.coords.y;
    if(this.x==this.nextX||this.y==this.nextY)
    {
        let checkX=[];
        for(let i=this.x;i<=this.nextX;i+=cellWidth)
        {
            checkX.push(i);
        }
        for(let i=0;i<chessPlate.length;i++)
        {
            if(chessPlate[i].coords.x==checkX[])    
        }
        return true;
    }      
    else
    {
        return false;
    }
   }


   checkMate()
    {
       // if(this.color=="white")
       // {
            let check=[];
        for(let i=0;i<chessPlate.length;i++)
        {
        if(chessPlate[i].figure!=null && chessPlate[i].figure.color!=this.color)
        {
            check.push(chessPlate[i])
        }
        }
        if(check.every(elem=>elem.figure.move(this.x, this.y)==false)==false)
        {
            check=[];
            return true;
        }
      //  }







                if(turn=="white")
                {
                    winCheckKingColor=blackKing;
                }  
                else
                {
                   winCheckKingColor=whiteKing;
                }
                if(winCheckKingColor.mate()!=true)
                {
                    alert('ss')
                }







                if(chessPlate[i].color=="white")
            {
            ctx.fillStyle =whiteCellColor; 
            ctx.fillRect(chessPlate[i].coords.x-cellWidth, chessPlate[i].coords.y-cellHeight, cellWidth, cellHeight) 
            }
            
            else
            {
            ctx.fillStyle=blackCellColor;
            ctx.fillRect(chessPlate[i].coords.x-cellWidth, chessPlate[i].coords.y-cellHeight, cellWidth, cellHeight) 
            }